@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix deo: <https://github.com/KNowledgeOnWebScale/n3s-policy-consistency-checker/> .
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

@import tr :- turtle{resource = "data/policy1.ttl"} .

policyClass(odrl:Set) .
policyClass(odrl:Offer) .
policyClass(odrl:Agreement) .

policyType(odrl:permission) .
policyType(odrl:prohibition) .
policyType(odrl:obligation) .

hasBody(?Policy,?Type,?Body) :-
    tr(?Policy,rdf:type,?What) ,
    policyClass(?What) ,
    policyType(?Type) ,
    tr(?Policy,?Type,?Body) .

bodyWithConstraint(?Body) :-
    tr(?Body,odrl:constraint,_) .

bodyWithoutConstraint(?Body) :-
    hasBody(?Body,odrl:target,_) ,
    ~bodyWithConstraint(?Body) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"gt") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    NUMGREATER(?Value,?Required) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"lt") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    NUMLESS(?Value,?Required) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"gteq") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    NUMGREATEREQ(?Value,?Required) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"lteq") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    NUMLESSEQ(?Value,?Required) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"eq") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    EQUALITY(?Value,?Required) .

condition(?Body,?Subject) :-
    tr(?Body,odrl:constraint,?Constraint) ,
    tr(?Constraint,odrl:operator,?Op) ,
    EQUALITY(?Op,"neq") ,
    tr(?Constraint,odrl:leftOperand,?Predicate) ,
    tr(?Constraint,odrl:rightOperand,?Required) ,
    tr(?Subject,?Predicate,?Value) ,
    UNEQUALITY(?Value,?Required) .

valid_constraint(?Body) :-
    bodyWithoutConstraint(?Body) .

valid_constraint(?Body) :-
    bodyWithConstraint(?Body) ,
    tr(?Body,odrl:assignee,?Assignee) , 
    condition(?Body,?Assignee) .

permission(?Policy,?Target,?Assigner,?Assignee,?Action) :-
    hasBody(?Policy,?Type,?Body) ,
    valid_constraint(?Body) ,
    ?Type = odrl:permission ,
    tr(?Body,odrl:assigner,?Assigner) ,
    tr(?Body,odrl:assignee,?Assignee) ,
    tr(?Body,odrl:action,?Action) ,
    tr(?Body,odrl:target,?Target) .

prohibition(?Policy,?Target,?Assigner,?Assignee,?Action) :-
    hasBody(?Policy,?Type,?Body) ,
    valid_constraint(?Body) ,
    ?Type = odrl:prohibition ,
    tr(?Body,odrl:assigner,?Assigner) ,
    tr(?Body,odrl:assignee,?Assignee) ,
    tr(?Body,odrl:action,?Action) ,
    tr(?Body,odrl:target,?Target) .

obligation(?Policy,?Target,?Assigner,?Assignee,?Action) :-
    hasBody(?Policy,?Type,?Body) ,
    valid_constraint(?Body) ,
    ?Type = odrl:obligation ,
    tr(?Body,odrl:assigner,?Assigner) ,
    tr(?Body,odrl:assignee,?Assignee) ,
    tr(?Body,odrl:action,?Action) ,
    tr(?Body,odrl:target,?Target) .

quad(deo:defaultgraph,deo:box,rdf:rtype,deo:ModalOperator) .

quad(deo:defaultgraph,?ROI,rdf:type,log:onNegativeSurface) ,
    quad(?ROI,?Policy,deo:box,?RII) ,
    quad(?ROI,?RII,rdf:type,log:onNegativeSurface) ,
    quad(?RII,?Assignee,?Action,?Target) 
    :-
    permission(?Policy,?Target,?Assigner,?Assignee,?Action) ,
    ?RO = CONCAT(STR(?Policy),"_outer") ,
    ?RI = CONCAT(STR(?Policy),"_inner") , 
    ?ROI = IRI(?RO) ,
    ?RII = IRI(?RI) .

quad(deo:defaultgraph,?Policy,deo:box,?ROI) ,
    quad(?ROI,?RII,rdf:type,log:onNegativeSurface) ,
    quad(?RII,?Assignee,?Action,?Target) 
    :-
    prohibition(?Policy,?Target,?Assigner,?Assignee,?Action) ,
    ?RO = CONCAT(STR(?Policy),"_outer") ,
    ?RI = CONCAT(STR(?Policy),"_inner") , 
    ?ROI = IRI(?RO) ,
    ?RII = IRI(?RI) .

quad(deo:defaultgraph,?Policy,deo:box,?RI) ,
    quad(?RI,?Assignee,?Action,?Target) 
    :-
    obligation(?Policy,?Target,?Assigner,?Assignee,?Action) ,
    ?R = CONCAT(STR(?Policy),"_outer") ,
    ?RI = IRI(?R) .

@export tr :- turtle{resource="example5.ttl"} .
@export quad :- nquads{resource="example5.nq"} .